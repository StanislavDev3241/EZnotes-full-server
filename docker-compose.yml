version: "3.8"

services:
  # Frontend Service (No Nginx required)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8081:80" # Changed from "8080:80" to "8081:80" to avoid conflicts
    depends_on:
      - backend
    networks:
      - clearlyai-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: http://83.229.115.190:8081 # Updated to match new port
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: clearlyai_db
      DB_USER: clearlyAI
      DB_PASSWORD: clearly_postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: clearlyai_super_secret_jwt_key_2024_production
      JWT_EXPIRES_IN: 24h
      MAX_FILE_SIZE: 100
      UPLOAD_PATH: ./uploads
      TEMP_PATH: ./temp
      MAKE_WEBHOOK_URL: https://hook.us2.make.com/xw5ld4jn0by5jn7hg1bups02srki06f8
      DEFAULT_RETENTION_DAYS: 14
      ADMIN_EMAIL: cmesmile50@gmail.com
      ADMIN_PASSWORD: clearly2025
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      # OpenAI API Configuration
      OPENAI_API_KEY: "your_openai_api_key_here"
      OPENAI_MODEL: "gpt-4o"
      WHISPER_MODEL: "whisper-1"
      CHAT_MAX_TOKENS: 1000
      CHAT_TEMPERATURE: 0.3
    depends_on:
      - postgres
      - redis
    networks:
      - clearlyai-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
    user: "1000:1000" # Run as user ID 1000 (node user)

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: clearlyai_db
      POSTGRES_USER: clearlyAI
      POSTGRES_PASSWORD: clearly_postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - clearlyai-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - clearlyai-network
    restart: unless-stopped

networks:
  clearlyai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
